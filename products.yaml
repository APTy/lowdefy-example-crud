
# On this page, we will handle both the edit and create product actions on the same page.

# We will create separate forms for the new product and edit product forms. This is simpler 
# than sharing the form. Sometimes additional actions and conditional logic are needed to manage these shared forms.

# To simplify the state on the page, we will give ids that look like new_product.{fieldName}
# and edit_product.{fieldName} to the input components. This will create separate objects in
# the page state, that will make managing them easier.

id: products
type: PageSiderMenu
properties:
  title: Products

actions:
  onEnter:
    # Fetch the brands_selector lookup request when we enter the page
    # This will ensure that we fetch newly added brands.
    # If this is not done, the brands_selector request will only be fetched
    # the first time the page is loaded.
    - id: fetch_brands  
      type: Fetch
      params: brands_selector

requests:
  - id: products_table
    type: MongoDBAggregation # MongoDb Aggregation to get the table data
    connectionId: products # Id of the connection defined in the lowdefy.yaml file
    properties:
      pipeline:
        - $sort:
            name: 1 # Sort alphabetically according to the name
  - id: brands_selector # MongoDb Aggregation to get a list of the brands and their _ids to be used by a brand dropdown selector
    type: MongoDBAggregation
    connectionId: brands
    properties:
      pipeline:
        - $project: # Project the correct fields that the dropdown selector expects: a list of value-label pairs
            _id: 0
            label: $name # This is what the user will see in the dropdown
            value: $_id # This is the value of the option selected in the dropdown
        - $sort:
            label: 1 # Sort the list alphabetically according to the label

# All the mutations are placed on the page object, so they are all together.
# In the brands example, the mutations were placed on the block that used them, so they are close
# to where they are used. Both approaches can be used, but it is best to be consistent throughout an app.
mutations:
  - id: insert_product
    type: MongoDBInsertOne # MongoDb insertOne mutation to write a new product into the collection
    connectionId: products
    properties:
      doc:
        name:
          _state: new_product.name
        brand_id:
          _state: new_product.brand_id
        description:
          _state: new_product.description
        created_at: 
          _date: now # Set created_at and updated_at dates as current time
        updated_at:
          _date: now
  - id: update_product
    type: MongoDBUpdateOne # MongoDb updateOne mutation to update the selected product
    connectionId: products
    properties:
      filter:
        _id:
          _state: edit_product._id # Filter the document that matches the selected document's _id (which is nested in the edit_product object)
      update:
        $set:
          name:
            _state: edit_product.name
          brand_id:
            _state: edit_product.brand_id
          description:
            _state: edit_product.description
          updated_at:
            _date: now
  - id: delete_product
    type: MongoDBDeleteOne # MongoDb deleteOne mutation to delete the selected product's document from the collection
    connectionId: products
    properties:
      filter:
        _id:
          _state: edit_product._id # Filter the document that matches the selected document's _id
blocks:
  - id: title # Create a Title block
    type: Title
    layout:
      grow: 1 # Use the same layout for the title as the brands page.
    properties:
      content: Products # The title's text
  - id: new_product_button # Create a Button block for adding a new product
    type: Button
    layout:
      grow: 0
    properties:
      title: New Product
      icon: PlusOutlined
    actions:
      onClick:
        - id: open_new_drawer # Open the drawer which contains the input fields to add a new product
          type: CallMethod
          params:
            blockId: new_product_drawer # The block id of the drawer
            method: toggleOpen # The method that opens the drawer

  - id: product_list # An agGrid table that lists all the products
    type: AgGrid
    properties:
      defaultColDef: # Define default column definitions that apply to all the defined columns
        sortable: true # Enables sorting on the columns when the header is clicked
        resizable: true # Enables resizing of column widths
        filter: true # Enables filtering of the columns using agGrid's default filter
      rowData:
        _request: products_table # Populate the table with our request that looks up the products
      columnDefs: # Define all the columns
        - headerName: Name # Display name
          field: name # The field name in the data
          width: 200
        - headerName: Description
          field: description
          width: 800
    actions:
      onRowClick:
        # Set the edit_product object in state to the selected row.
        # Since the row has the same datafields (_id, name, description and brand_id), these fields are populated.
        - id: set_edit_product
          type: SetState
          params:
            edit_product: 
              _args: row 
        - id: open_edit_drawer # Open the drawer which contains the input fields to edit the selected product
          type: CallMethod
          params:
            blockId: edit_product_drawer
            method: toggleOpen

  - id: new_product_drawer
    type: Drawer
    properties:
      title: New Product
      width: 512px # Set the width of the drawer to be 512px
    layout:
      contentGutter: 16 # Set a gutter of 16px between all the blocks in the drawer
    blocks:
      - id: new_product.name # Create a single line text box block to capture the new product name
        type: TextInput
        properties:
          title: Name
          placeholder: Product Name # Text to display inside the input box when nothing has been entered yet
      - id: new_product.brand_id # A dropdown selector to select the brand_id of the brand to which this product belongs to
        type: Selector
        properties:
          title: Brand
          placeholder: Select brand
          options:
            _request: brands_selector # Populate the options of the dropdown using the request we defined earlier
      - id: new_product.description
        type: TextArea # A multi-line text box block to capture the new product description
        properties:
          title: Description
          placeholder: Product Description
      - id: insert_product
        type: Button
        properties:
          title: Save
          icon: SaveOutlined
          block: true # Makes the button fill the maximum defined width instead of only the with of its contents (title and icon)
        actions:
          onClick:
            - id: insert_product # Call the insert_product mutation
              type: Mutate
              params: insert_product
            - id: close_new_drawer # Close the new_product drawer
              type: CallMethod
              params:
                blockId: new_product_drawer
                method: setOpen  # The method that closes the drawer - set the open state of the drawer to false
                args:
                  open: false
            - id: fetch_products_table # Fetch the products_table request again to show the newly created product in the table
              type: Fetch
              params: products_table
    actions:
      onClose:
        # Resets the fields in the new_product object.
        # This is so that if the user sets an input, then closes it and opens the drawer
        # again, the input is reser
        - id: reset_new_product
          type: SetState
          params:
            new_product: null

  - id: edit_product_drawer
    type: Drawer
    properties:
      title: Edit Product
      width: 512px
    layout:
      contentGutter: 16
    blocks:
      - id: edit_product.name
        type: TextInput
        properties:
          title: Name
          placeholder: Product Name
      - id: edit_product.brand_id # A dropdown selector to select the brand_id of the brand to which this product belongs to
        type: Selector
        properties:
          title: Brand
          placeholder: Select brand
          options:
            _request: brands_selector # Populate the options of the dropdown using the request we defined earlier
      - id: edit_product.description
        type: TextArea
        properties:
          title: Description
          placeholder: Product Description
      - id: delete_product_button # Button for deleting the product
        type: Button
        layout:
          grow: 1 
        properties:
          title: Delete
          icon: DeleteOutlined
          type: danger # Set the type of button to a danger button (which is red in color)
          block: true
        actions:
          onClick:
            - id: open_delete_modal # Open a pop up modal to confirm whether you want to delete the product
              type: CallMethod
              params:
                blockId: delete_modal
                method: open
      - id: update_product_button
        type: Button
        layout:
          grow: 3
        properties:
          title: Save
          icon: SaveOutlined
          block: true
        actions:
          onClick:
            - id: update_product
              type: Mutate
              params: update_product
            - id: close_drawer
              type: CallMethod
              params:
                blockId: edit_product_drawer
                method: setOpen
                args:
                  open: false
            - id: fetch_products_table
              type: Fetch
              params: products_table

      - id: delete_modal
        type: ConfirmModal
        properties:
          content: Are you sure you want to delete this product? # The text inside the modal
          okText: Yes # Change the default text of the ok button to 'Yes'
          okButton:
            type: danger # Change the default type of the ok button to danger
          cancelText: No # Change the default text of the cancel button to 'No'
        actions:
          onOk:
            - id: delete_product
              type: Mutate
              params: delete_product
            - id: close_edit_drawer
              type: CallMethod
              params:
                blockId: edit_product_drawer
                method: setOpen
                args:
                  open: false
            - id: fetch_products_table # Fetch the products_table request again to the list of products without the newly deleted one
              type: Fetch
              params: products_table