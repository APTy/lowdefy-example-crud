id: brands
type: PageSiderMenu
properties:
  title: Brands

actions:
  onEnter: # A list of actions that gets completed each time the page is loaded
    - id: fetch_brands
      type: Fetch
      params: brands_table # Fetch the brands table query each time you enter the page
      
requests:
  - id: brands_table
    type: MongoDBAggregation # MongoDb Aggregation to get the table data
    connectionId: brands # Id of the connection defined in the lowdefy.yaml file
    properties:
      pipeline:
        - $match:
            archive:
              $ne: true # Match all documents that have not been archived
        - $sort:
            name: 1 # Sort alphabetically according to the name

mutations:
  - id: insert_brand
    type: MongoDBInsertOne # MongoDb insertOne mutation to write a new brand into the collection
    connectionId: brands
    properties:
      doc:
        _state: new_brand # Insert the entire new_brand object, which contains the brand name and description
  - id: update_brand
    type: MongoDBUpdateOne # MongoDb updateOne mutation to update the selected brand
    connectionId: brands
    properties:
      filter:
        _id:
          _state: edit_brand._id # Filter the document that matches the selected document's _id (which is nested in the edit_brand object)
      update:
        $set:
          _state: edit_brand # Update all the fields in the edit_brand object, which contains the brand name and description
  - id: delete_brand
    type: MongoDBDeleteOne # MongoDb deleteOne mutation to delete the selected brand's document from the collection
    connectionId: brands
    properties:
      filter:
        _id:
          _state: edit_brand._id # Filter the document that matches the selected document's _id

  # We created a new_brand object and an edit_brand object that both contain the brand info.
  # The reason for placing the brand info field in two separate objects instead of the root 
  # level of state is to make the mutation operations easier and to enable us to have two 
  # separate set of fields that capture the same information.

blocks:
  - id: brand_title # Create a Title block
    type: Title
    layout:
      grow: true # Set the block the left side of the page
    properties:
      content: Brands # The title's text
  - id: new_brand # Create a Button block for adding a new brand
    type: Button
    layout:
      shrink: true # Set the block the right side of the page
    properties:
      title: New Brand # Button text
      icon: PlusOutlined # Ant Design icon
      hideActionLoading: true # Hides the loading icon when the button is clicked
    actions:
      onClick: # A list of actions to complete when the button is clicked
        - id: link_new_brand # Link to the page where we will add a new brand
          type: Link
          params:
            pageId: new-brand # The page id of the new brand page

  - id: brand_list # An agGrid table that lists all the brands
    type: AgGrid
    properties:
      defaultColDef: # Define default column definitions that apply to all the defined columns
        sortable: true # Enables sorting on the columns when the header is clicked
        resizable: true # Enables resizing of column widths
        filter: true # Enables filtering of the columns using agGrid's default filter
      rowData:
        _request: brands_table # Populate the table with our request that looks up the brands
      columnDefs: # Define all the columns
        - headerName: Name # Display name
          field: name # The field name in the data
          width: 200
        - headerName: Description
          field: description
          width: 800
    actions:
      onRowClick: # Define what happens when a row is clicked
        - id: set_edit_brand
          type: SetState
          params:
            edit_brand: 
              _id:
                _args: row._id # Call the row _args (the row data )to set the _id field in the edit_brand object equal the _id field of the selected row
              name:
                _args: row.name
              description:
                _args: row.description
        - id: link_edit_brand # Link to the page where we will edit the selected brand
          type: Link
          params:
            pageId: edit-brand # The page id of the edit brand page
            input:
              brand_id:
                _args: row._id  # Provide the _id field of the selected brand to use as input for the page we are linking to
                              # Call the row _args (the row data) to access the selected row's data