id: brands
type: PageSiderMenu
properties:
  title: Brands

actions:
  onEnter:  # A list of actions that gets completed each time the page is loaded.
            # All the page requests are fetched automatically when the page is loaded for the first time,
            # the reason we wantto fetch the brands_table request here is because we will link back to
            # this page from the new-brand and edit-brand pages after making changes that require the
            # brands_table request to be refetched.
    - id: fetch_brands
      type: Fetch
      params: brands_table # Fetch the brands table query each time you enter the page
      
requests:
### Which one of these two requests will work best for a simple example?

  - id: brands_table
    type: MongoDBFind # MongoDb Aggregation to get the table data
    connectionId: brands # Id of the connection defined in the lowdefy.yaml file
    properties:
      query:
        _id:
            $exists: true # Find all documents that exist
      options:
        sort: # Sort alphabetically according to the name
          - - name
            - 1
  # - id: brands_table
  #   type: MongoDBAggregation # MongoDb Aggregation to get the table data
  #   connectionId: brands # Id of the connection defined in the lowdefy.yaml file
  #   properties:
  #     pipeline:
  #       - $sort:
  #           name: 1 # Sort alphabetically according to the name

blocks:
  - id: brand_title # Create a Title block
    type: Title
    layout:
      grow: true # Set the block the left side of the page
    properties:
      content: Brands # The title's text
  - id: new_brand_button # Create a Button block we can click when we want to add a new brand
    type: Button
    layout:
      shrink: true # Set the block the right side of the page
    properties:
      title: New Brand # Button text
      icon: PlusOutlined # Ant Design icon
      hideActionLoading: true # Hides the loading icon when the button is clicked
    actions:
      onClick: # A list of actions to complete when the button is clicked
        - id: link_new_brand # Link to the page where we will add a new brand
          type: Link
          params:
            pageId: new-brand # The page id of the new brand page

  - id: brand_list # An agGrid table that lists all the brands
    type: AgGrid
    properties:
      defaultColDef: # Define default column definitions that apply to all the defined columns
        sortable: true # Enables sorting on the columns when the header is clicked
        resizable: true # Enables resizing of column widths
        filter: true # Enables filtering of the columns using agGrid's default filter
      rowData:
        _request: brands_table # Populate the table with our request that looks up the brands
      columnDefs: # Define all the columns
        - headerName: Name # Display name
          field: name # The field name in the data
          width: 200
        - headerName: Description
          field: description
          width: 800
    actions:
      onRowClick: # Define what happens when a row is clicked
        - id: set_edit_brand
          type: SetState
          params:
            edit_brand: 
              _id:
                _args: row._id # Access the row _args (the row data) to set the _id field in the edit_brand object equal the _id field of the selected row
              name:
                _args: row.name
              description:
                _args: row.description
        - id: link_edit_brand # Link to the page where we will edit the selected brand
          type: Link
          params:
            pageId: edit-brand # The page id of the edit brand page
            input:
              brand_id:
                _args: row._id  # Access the row _args (the row data) to get the _id field of the selected
                                # brand and use as input for the edit-brand page we are linking to